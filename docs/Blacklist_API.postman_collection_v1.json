{
	"info": {
		"_postman_id": "91724efb-2c58-4af1-9a43-f4b8010d4798",
		"name": "Blacklist API",
		"description": "Collection for testing the Blacklist API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38981643"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Health Check",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    pm.expect(() => pm.response.json()).not.to.throw();",
							"});",
							"",
							"pm.test(\"Response has 'status' and 'message' fields\", function () {",
							"    const json = pm.response.json();",
							"    pm.expect(json).to.have.property(\"status\");",
							"    pm.expect(json).to.have.property(\"message\");",
							"    pm.expect(json.status).to.be.oneOf([\"ok\", \"healthy\"]);",
							"    pm.expect(json.message).to.be.a(\"string\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/blacklist/ping",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blacklist",
						"ping"
					]
				},
				"description": "Check if the API is running"
			},
			"response": []
		},
		{
			"name": "Add Email to Blacklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Add Email to Blacklist - Success Case",
							"",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    pm.expect(() => pm.response.json()).not.to.throw();",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"test@example.com\",\n  \"app_uuid\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"blocked_reason\": \"Spam activity\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/blacklist",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blacklist"
					]
				},
				"description": "Add an email to the blacklist"
			},
			"response": []
		},
		{
			"name": "Check Email in Blacklist",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/blacklist/test@example.com",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blacklist",
						"test@example.com"
					]
				},
				"description": "Check if an email is in the blacklist"
			},
			"response": []
		},
		{
			"name": "Check Non-Existing Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check Non-Existing Email",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    pm.expect(() => pm.response.json()).not.to.throw();",
							"});",
							"",
							"pm.test(\"Response has 'existing' field in false\", function () {",
							"    const json = pm.response.json();",
							"    pm.expect(json).to.have.property(\"existing\");",
							"    pm.expect(json.existing).to.be.a(\"boolean\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/blacklist/notfound@example.com",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blacklist",
						"notfound@example.com"
					]
				},
				"description": "Check an email that is not in the blacklist"
			},
			"response": []
		},
		{
			"name": "Add Duplicate Email (Should Fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Add Duplicate Email (Should Fail)",
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    pm.expect(() => pm.response.json()).not.to.throw();",
							"});",
							"",
							"pm.test(\"Response has 'message' field\", function () {",
							"    const json = pm.response.json();",
							"    pm.expect(json).to.have.property(\"message\");",
							"    pm.expect(json.message).to.be.a(\"string\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"test@example.com\",\n  \"app_uuid\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"blocked_reason\": \"Duplicate attempt\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/blacklist",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blacklist"
					]
				},
				"description": "Try to add the same email again (should return 400)"
			},
			"response": []
		},
		{
			"name": "Add Email with Invalid Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Add Email with Invalid Format (Should Fail)",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    pm.expect(() => pm.response.json()).not.to.throw();",
							"});",
							"",
							"pm.test(\"Response has 'message' field\", function () {",
							"    const json = pm.response.json();",
							"    pm.expect(json).to.have.property(\"message\");",
							"    pm.expect(json.message).to.be.a(\"string\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"invalid-email\",\n  \"app_uuid\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"blocked_reason\": \"Invalid format test\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/blacklist",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blacklist"
					]
				},
				"description": "Try to add an email with invalid format (should return 400)"
			},
			"response": []
		},
		{
			"name": "Add Email with Invalid UUID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Add Email with Invalid UUID (Should Fail)",
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    pm.expect(() => pm.response.json()).not.to.throw();",
							"});",
							"",
							"pm.test(\"Response has 'message' field\", function () {",
							"    const json = pm.response.json();",
							"    pm.expect(json).to.have.property(\"message\");",
							"    pm.expect(json.message).to.be.a(\"string\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"valid@example.com\",\n  \"app_uuid\": \"invalid-uuid\",\n  \"blocked_reason\": \"Invalid UUID test\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/blacklist",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blacklist"
					]
				},
				"description": "Try to add an email with invalid UUID (should return 400)"
			},
			"response": []
		},
		{
			"name": "Unauthorized Access (No Token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Unauthorized Access (No Token)",
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    pm.expect(() => pm.response.json()).not.to.throw();",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/blacklist/test@example.com",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blacklist",
						"test@example.com"
					]
				},
				"description": "Try to access endpoint without token (should return 401)"
			},
			"response": []
		},
		{
			"name": "Invalid Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Invalid Token (Should Fail)",
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    pm.expect(() => pm.response.json()).not.to.throw();",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer invalid_token_here",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/blacklist/test@example.com",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blacklist",
						"test@example.com"
					]
				},
				"description": "Try to access endpoint with invalid token (should return 422)"
			},
			"response": []
		},
		{
			"name": "Add Another Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Add Another Email - Success Case",
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    pm.expect(() => pm.response.json()).not.to.throw();",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"spammer@badsite.com\",\n  \"app_uuid\": \"550e8400-e29b-41d4-a716-446655440001\",\n  \"blocked_reason\": \"Confirmed spammer\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/blacklist",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blacklist"
					]
				},
				"description": "Add another email to test multiple entries"
			},
			"response": []
		}
	],
	"auth": {
		"type": "jwt",
		"jwt": [
			{
				"key": "payload",
				"value": "{\n    \"sub\": \"hello-world\"\n}",
				"type": "string"
			},
			{
				"key": "secret",
				"value": "super-secret",
				"type": "string"
			},
			{
				"key": "algorithm",
				"value": "HS256",
				"type": "string"
			},
			{
				"key": "isSecretBase64Encoded",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "headerPrefix",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "queryParamKey",
				"value": "token",
				"type": "string"
			},
			{
				"key": "header",
				"value": "{}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000"
		},
		{
			"key": "jwt_token",
			"value": "YOUR_JWT_TOKEN_HERE"
		}
	]
}